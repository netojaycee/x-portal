import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import type { BaseQueryFn, FetchArgs, FetchBaseQueryError } from "@reduxjs/toolkit/query";
import { clearUserInfo, setUserInfo } from "./slices/userSlice";
import { AuthResponse } from "@/lib/types";
import { LoginCredentials, loginSchema, RegisterCredentials, registerSchema } from "@/lib/schema";


const BASE_URL =
    process.env.NODE_ENV === "production"
        ? process.env.NEXT_PUBLIC_API_URL || "https://x-portal-frontend.vercel.app"
        : `http://localhost:${process.env.PORT || 8000}`;

// Base query with TypeScript annotations
const baseQuery: BaseQueryFn<FetchArgs, unknown, FetchBaseQueryError> = fetchBaseQuery({
    baseUrl: `${BASE_URL}/api/v1`,
    credentials: 'include',
    prepareHeaders: (headers: Headers) => {
        headers.set("Content-Type", "application/json");
        return headers;
    },
});





// Define the API
export const api = createApi({
    reducerPath: "api",
    baseQuery,
    tagTypes: ["User"],
    endpoints: (builder) => ({
        // Register Endpoint
        register: builder.mutation<AuthResponse, RegisterCredentials>({
            query: (credentials) => ({
                url: "/auth/register",
                method: "POST",
                body: registerSchema.parse(credentials),
            }),
            onQueryStarted: async (_arg, { queryFulfilled }) => {
                try {
                    await queryFulfilled;
                    // setCookie("token", data.token, 24 * 60 * 60); // 1 day
                } catch (error) {
                    console.error("Register failed:", error);
                }
            },
        }),

        // Login Endpoint
        login: builder.mutation<AuthResponse, LoginCredentials>({
            query: (credentials) => ({
                url: "/auth/login",
                method: "POST",
                body: loginSchema.parse(credentials),
            }),
            onQueryStarted: async (_arg, { dispatch, queryFulfilled }) => {
                try {
                    const { data } = await queryFulfilled;
                    // setCookie("token", data.token, 24 * 60 * 60); // 1 day
                    dispatch(setUserInfo({
                        ...data.user,
                        full_name: `${data.user.first_name} ${data.user.last_name}`
                    }));


                    console.log(data.user);
                    // dispatch(setAuthenticated(true));
                } catch (error) {
                    console.error("Login failed:", error);
                }
            },
        }),

        // Send OTP Endpoint
        sendOTP: builder.mutation<{ message: string }, { email: string, type: "register" | "forgot-password" }>({
            query: (credentials) => ({
                url: "/auth/send-otp",
                method: "POST",
                body: credentials,
            }),
            onQueryStarted: async (_arg, { queryFulfilled }) => {
                try {
                    await queryFulfilled;
                } catch (error) {
                    console.error("Send OTP failed:", error);
                }
            },
        }),

        // Verify OTP Endpoint
        verify: builder.mutation<{ message: string, resetToken: string }, { email: string; code: string }>({
            query: (credentials) => ({
                url: "/auth/verify",
                method: "POST",
                body: { email: credentials.email, code: credentials.code, type: "register" },
            }),
            onQueryStarted: async (_arg, { queryFulfilled }) => {
                try {
                    await queryFulfilled;

                } catch (error) {
                    console.error("Verify OTP failed:", error);
                }
            },
        }),

        // Change Password Endpoint
        changePassword: builder.mutation<
            { message: string },
            { email: string; password: string; resetToken: string }>({
                query: (credentials) => ({
                    url: "/auth/change-password",
                    method: "POST",
                    body: credentials,
                }),
                onQueryStarted: async (_arg, { queryFulfilled }) => {
                    try {
                        await queryFulfilled;
                    } catch (error) {
                        console.error("Change password failed:", error);
                    }
                },
            }),



        // Google OAuth Endpoint (GET only for redirect to Google)
        getGoogleAuthUrl: builder.query<{ url: string }, void>({
            query: () => ({
                url: "/auth/google",
                method: "GET",
            }),
        }),

        // Google OAuth Endpoint (POST only for callback)
        google: builder.mutation<AuthResponse, { code: string }>({
            query: (credentials) => ({
                url: "/auth/google/callback",
                method: "POST",
                body: { code: credentials.code },
            }),
            onQueryStarted: async (_arg, { queryFulfilled }) => {
                try {
                    await queryFulfilled;
                    // setCookie("token", data.token, 24 * 60 * 60); // 1 day
                    // dispatch(setUserInfo(data.user));
                    // dispatch(setAuthenticated(true));
                } catch (error) {
                    console.error("Google auth failed:", error);
                }
            },
        }),

        // Logout Endpoint
        logout: builder.mutation<{ message: string }, void>({
            query: () => ({
                url: "/auth/logout",
                method: "POST",
            }),
            onQueryStarted: async (_arg, { dispatch, queryFulfilled }) => {
                try {
                    await queryFulfilled;
                    dispatch(clearUserInfo())
                } catch (error) {
                    console.error("Logout failed:", error);
                }
            },
        }),

        // Get User (for internal use after login/verify/google)
        getUser: builder.query<AuthResponse, void>({
            query: () => ({ url: "/auth/me" }),
            keepUnusedDataFor: 600,
            providesTags: ["User"],
            onQueryStarted: async (_arg, { dispatch, queryFulfilled }) => {
                try {
                    const { data } = await queryFulfilled;

                    dispatch(setUserInfo({
                        ...data.user,
                        full_name: `${data.user.first_name} ${data.user.last_name}`
                    }));

                } catch (error) {
                    console.error("Get user failed:", error);
                }
            },
        }),

        // Get all categories (with pagination)
        getCategories: builder.query<
            { categories: Category[], pagination: { total: number, page: number, limit: number, totalPages: number, hasNextPage: boolean, hasPrevPage: boolean } },
            { page?: number; limit?: number }
        >({
            query: ({ page = 1, limit = 10 }) => ({
                url: "/categories",
                method: "GET",
                params: { page, limit },
            }),
            providesTags: ["Category"],
        }),

        // Get a category by ID or slug
        getCategoryById: builder.query<Category, string>({
            query: (slug) => ({
                url: `/categories/${slug}`,
                method: "GET",
            }),
            providesTags: (result, error, slug) => [{ type: "Category", id: slug }],
        }),

        // Add a new category
        addCategory: builder.mutation<Category, { name: string }>({
            query: (data) => ({
                url: "/categories",
                method: "POST",
                body: data,
            }),
            invalidatesTags: ["Category"],
        }),

        // Update a category by ID or slug
        updateCategory: builder.mutation<Category, { slug: string; name: string }>({
            query: ({ slug, ...data }) => ({
                url: `/categories/${slug}`,
                method: "PATCH",
                body: data,
            }),
            invalidatesTags: (result, error, { slug }) => [
                { type: "Category", id: slug },
                "Category",
            ],
        }),

        // Delete a category by ID or slug
        deleteCategory: builder.mutation<{ message: string }, string>({
            query: (slug) => ({
                url: `/categories/${slug}`,
                method: "DELETE",
            }),
            invalidatesTags: (result, error, slug) => [
                { type: "Category", id: slug },
                "Category",
            ],
        }),

        // Get all products (with pagination and optional filtering)
        getProducts: builder.query<
            { products: Product[], pagination: { total: number, page: number, limit: number, totalPages: number, hasNextPage: boolean, hasPrevPage: boolean } },
            { page?: number; limit?: number; type?: string; query?: string }
        >({
            query: ({ page = 1, limit = 10, type, query }) => ({
                url: "/products",
                method: "GET",
                params: { page, limit, type, query },
            }),
            providesTags: ["Product"],
        }),

        // Get products by category (with pagination)
        getProductsByCategory: builder.query<
            { data: Product[], pagination: { page: number, limit: number } },
            { category: string; page?: number; limit?: number }
        >({
            query: ({ category, page = 1, limit = 10 }) => ({
                url: `/products/category/${category}`,
                method: "GET",
                params: { page, limit },
            }),
            providesTags: (result, error, { category }) => [
                { type: "Product", id: `CATEGORY-${category}` },
                "Product",
            ],
        }),

        // Get a product by ID or slug
        getProductById: builder.query<Product, string>({
            query: (slug) => ({
                url: `/products/${slug}`,
                method: "GET",
            }),
            providesTags: (result, error, slug) => [{ type: "Product", id: slug }],
        }),

        // Add a new product
        addProduct: builder.mutation<Product, { name: string, type: string, categoryId?: string, description: string, image: string, perfectFor?: string[], whyChoose?: string[], price: number, discountPrice?: number, tags: string[], itemsInGift?: string[] }>({
            query: (data) => ({
                url: "/products",
                method: "POST",
                body: data,
            }),
            invalidatesTags: ["Product"],
        }),

        // Update a product by ID or slug
        updateProduct: builder.mutation<Product, { slug: string; name?: string; type?: string; categoryId?: string; description?: string; image?: string; perfectFor?: string[]; whyChoose?: string[]; price?: number; discountPrice?: number; tags?: string[]; itemsInGift?: string[] }>({
            query: ({ slug, ...data }) => ({
                url: `/products/${slug}`,
                method: "PATCH",
                body: data,
            }),
            invalidatesTags: (result, error, { slug }) => [
                { type: "Product", id: slug },
                "Product",
            ],
        }),

        // Delete a product by ID or slug
        deleteProduct: builder.mutation<{ message: string }, string>({
            query: (slug) => ({
                url: `/products/${slug}`,
                method: "DELETE",
            }),
            invalidatesTags: (result, error, slug) => [
                { type: "Product", id: slug },
                "Product",
            ],
        }),
        // Get all packages (with pagination)
        getPackages: builder.query<
            { packages: Package[], pagination: { total: number, page: number, limit: number, totalPages: number, hasNextPage: boolean, hasPrevPage: boolean } },
            { page?: number; limit?: number }
        >({
            query: ({ page = 1, limit = 10 }) => ({
                url: "/packages",
                method: "GET",
                params: { page, limit },
            }),
            providesTags: ["Package"],
        }),

        // Get a package by ID
        getPackageById: builder.query<Package, string>({
            query: (id) => ({
                url: `/packages/${id}`,
                method: "GET",
            }),
            providesTags: (result, error, id) => [{ type: "Package", id }],
        }),

        // Add a new package
        addPackage: builder.mutation<Package, { name: string, image: string }>({
            query: (data) => ({
                url: "/packages",
                method: "POST",
                body: data,
            }),
            invalidatesTags: ["Package"],
        }),

        // Update a package by ID
        updatePackage: builder.mutation<Package, { id: string; name?: string; image?: string }>({
            query: ({ id, ...data }) => ({
                url: `/packages/${id}`,
                method: "PATCH",
                body: data,
            }),
            invalidatesTags: (result, error, { id }) => [
                { type: "Package", id },
                "Package",
            ],
        }),

        // Delete a package by ID
        deletePackage: builder.mutation<{ message: string }, string>({
            query: (id) => ({
                url: `/packages/${id}`,
                method: "DELETE",
            }),
            invalidatesTags: (result, error, id) => [
                { type: "Package", id },
                "Package",
            ],
        }),

    }),
});

// Export hooks with TypeScript types
export const {
    useRegisterMutation,
    useLoginMutation,
    useSendOTPMutation,
    useVerifyMutation,
    useChangePasswordMutation,
    useGetGoogleAuthUrlQuery,
    useGoogleMutation,
    useLogoutMutation,
    useGetUserQuery,
    useGetCategoriesQuery,
    useGetCategoryByIdQuery,
    useAddCategoryMutation,
    useUpdateCategoryMutation,
    useDeleteCategoryMutation,
    useGetProductsQuery,
    useGetProductByIdQuery,
    useAddProductMutation,
    useUpdateProductMutation,
    useDeleteProductMutation,
    useGetPackagesQuery,
    useGetPackageByIdQuery,
    useAddPackageMutation,
    useUpdatePackageMutation,
    useDeletePackageMutation,
    useGetProductsByCategoryQuery,


} = api;

export type AppApi = typeof api;