"use client";

import React, { useState, useMemo } from "react";
import CustomTable, {
  AdvancedFilterValues,
  ActionOption,
} from "@/app/(dashboard)/components/CustomTable";
import { CustomModal } from "@/app/(dashboard)/components/modals/CustomModal";
import { ENUM_MODULES } from "@/lib/types/enums";
import { useRouter } from "next/navigation";
import OfflinePaymentReferenceForm from "./OfflinePaymentReferenceForm";
import {
  useGetOfflinePaymentsQuery,
  useGetSessionsQuery,
  useGetTermsQuery,
  useGetClassesQuery,
  useGetClassArmsQuery,
} from "@/redux/api";

interface OfflinePayment {
  id: string;
  studentName: string;
  class: string;
  invoiceNumber: string;
  amount: number;
  generatedBy: string;
  createdOn: string;
  status: "approved" | "pending" | "rejected";
}

const OfflinePaymentsTab: React.FC = () => {
  const router = useRouter();
  const [currentPage, setCurrentPage] = useState(1);
  const [rowsPerPage, setRowsPerPage] = useState(10);
  const [searchTerm, setSearchTerm] = useState("");
  const [openOfflinePaymentModal, setOpenOfflinePaymentModal] = useState(false);
  const [advancedFilters, setAdvancedFilters] = useState<AdvancedFilterValues>({
    sessionId: "",
    termId: "",
    classId: "",
    classArmId: "",
    status: "",
  });

  // Fetch filter data
  const { data: sessionsData } = useGetSessionsQuery({});
  const { data: termsData } = useGetTermsQuery({});
  const { data: classesData } = useGetClassesQuery({});
  const { data: classArmsData } = useGetClassArmsQuery({});

  // Fetch offline payments with filters
  const { data: offlinePaymentsData, isLoading } = useGetOfflinePaymentsQuery({
    page: currentPage,
    limit: rowsPerPage,
    q: searchTerm,
    sessionId: advancedFilters.sessionId,
    termId: advancedFilters.termId,
    classId: advancedFilters.classId,
    classArmId: advancedFilters.classArmId,
    status: advancedFilters.status,
  });

  const sessions = useMemo(
    () =>
      sessionsData?.data?.map((session: any) => ({
        id: session.id,
        name: session.name,
      })) || [],
    [sessionsData]
  );

  const terms = useMemo(
    () =>
      termsData?.data?.map((term: any) => ({ id: term.id, name: term.name })) ||
      [],
    [termsData]
  );

  const classes = useMemo(
    () =>
      classesData?.data?.map((classItem: any) => ({
        id: classItem.id,
        name: classItem.name,
      })) || [],
    [classesData]
  );

  const classArms = useMemo(
    () =>
      classArmsData?.data?.map((arm: any) => ({
        id: arm.id,
        name: arm.name,
      })) || [],
    [classArmsData]
  );

  const statusOptions = [
    { value: "approved", label: "Approved" },
    { value: "pending", label: "Pending" },
    { value: "rejected", label: "Rejected" },
  ];

  const columns = [
    {
      key: "serialNumber",
      label: "S/N",
    },
    {
      key: "studentName",
      label: "Student Name",
    },
    {
      key: "class",
      label: "Class",
    },
    {
      key: "invoiceNumber",
      label: "Invoice Number",
    },
    {
      key: "amount",
      label: "Amount",
    },
    {
      key: "generatedBy",
      label: "Generated By",
    },
    {
      key: "createdOn",
      label: "Created On",
    },
    {
      key: "status",
      label: "Status",
    },
    {
      key: "actions",
      label: "Actions",
    },
  ];

  const data = useMemo(() => {
    if (!offlinePaymentsData?.data) return [];

    return offlinePaymentsData.data.map((payment: any, index: number) => ({
      ...payment,
      serialNumber: (currentPage - 1) * rowsPerPage + index + 1,
    }));
  }, [offlinePaymentsData?.data, currentPage, rowsPerPage]);

  const getActionOptions = (item: OfflinePayment): ActionOption[] => {
    const baseActions = [
      {
        label: "View Payment",
        type: "custom" as const,
        handler: () => {
          router.push(`/admin/fees/offline-payment/${item.id}`);
        },
        key: "view",
      },
    ];

    if (item.status === "pending") {
      baseActions.push(
        {
          label: "Approve",
          type: "custom" as const,
          handler: () => {
            console.log("Approve offline payment:", item);
          },
          key: "approve",
        },
        {
          label: "Reject",
          type: "custom" as const,
          handler: () => {
            console.log("Reject offline payment:", item);
          },
          key: "reject",
        }
      );
    }

    if (item.status === "approved") {
      baseActions.push({
        label: "Download Receipt",
        type: "custom" as const,
        handler: () => {
          console.log("Download receipt:", item);
        },
        key: "download",
      });
    }

    return baseActions;
  };

  const handleAdvancedFilterChange = (newFilters: AdvancedFilterValues) => {
    setAdvancedFilters(newFilters);
    setCurrentPage(1); // Reset to first page when filters change
  };

  // Calculate summary statistics
  const summaryStats = useMemo(() => {
    if (!offlinePaymentsData?.data) return null;

    const totalPayments = offlinePaymentsData.data.length;
    const totalAmount = offlinePaymentsData.data.reduce(
      (sum: number, payment: any) => sum + payment.amount,
      0
    );
    const approvedCount = offlinePaymentsData.data.filter(
      (payment: any) => payment.status === "approved"
    ).length;
    const pendingCount = offlinePaymentsData.data.filter(
      (payment: any) => payment.status === "pending"
    ).length;
    const rejectedCount = offlinePaymentsData.data.filter(
      (payment: any) => payment.status === "rejected"
    ).length;

    return {
      totalPayments,
      totalAmount,
      approvedCount,
      pendingCount,
      rejectedCount,
      approvalRate:
        totalPayments > 0 ? (approvedCount / totalPayments) * 100 : 0,
    };
  }, [offlinePaymentsData?.data]);

  return (
    <div className='space-y-4'>
      {/* Summary Cards */}
      {summaryStats && (
        <div className='grid grid-cols-1 md:grid-cols-6 gap-4 mb-6'>
          <div className='bg-white p-4 rounded-lg border'>
            <div className='text-sm text-gray-600'>Total Payments</div>
            <div className='text-2xl font-bold'>
              {summaryStats.totalPayments}
            </div>
          </div>
          <div className='bg-white p-4 rounded-lg border'>
            <div className='text-sm text-gray-600'>Total Amount</div>
            <div className='text-2xl font-bold text-blue-600'>
              â‚¦{summaryStats.totalAmount.toLocaleString()}
            </div>
          </div>
          <div className='bg-white p-4 rounded-lg border'>
            <div className='text-sm text-gray-600'>Approved</div>
            <div className='text-2xl font-bold text-green-600'>
              {summaryStats.approvedCount}
            </div>
          </div>
          <div className='bg-white p-4 rounded-lg border'>
            <div className='text-sm text-gray-600'>Pending</div>
            <div className='text-2xl font-bold text-yellow-600'>
              {summaryStats.pendingCount}
            </div>
          </div>
          <div className='bg-white p-4 rounded-lg border'>
            <div className='text-sm text-gray-600'>Rejected</div>
            <div className='text-2xl font-bold text-red-600'>
              {summaryStats.rejectedCount}
            </div>
          </div>
          <div className='bg-white p-4 rounded-lg border'>
            <div className='text-sm text-gray-600'>Approval Rate</div>
            <div className='text-2xl font-bold text-purple-600'>
              {summaryStats.approvalRate.toFixed(1)}%
            </div>
          </div>
        </div>
      )}

      <CustomTable
        title='Offline Payments'
        columns={columns}
        data={data}
        filters={{
          showSearch: true,
          showFilter: false,
          showAdvancedFilters: true,
          showSessionFilter: true,
          showTermFilter: true,
          showClassFilter: true,
          showClassArmFilter: true,
          showStatusFilter: true,
        }}
        currentPage={currentPage}
        onPageChange={setCurrentPage}
        rowsPerPage={rowsPerPage}
        onRowsPerPageChange={setRowsPerPage}
        searchTerm={searchTerm}
        onSearchChange={setSearchTerm}
        totalItems={offlinePaymentsData?.total || 0}
        getActionOptions={getActionOptions}
        isSearching={isLoading}
        // Advanced filter props
        advancedFilterValues={advancedFilters}
        onAdvancedFilterChange={handleAdvancedFilterChange}
        sessions={sessions}
        terms={terms}
        classes={classes}
        classArms={classArms}
        statusOptions={statusOptions}
        showActionButton={true}
        actionButtonText='Add Offline Payment'
        onActionButtonClick={() => setOpenOfflinePaymentModal(true)}
      />

      <CustomModal
        open={openOfflinePaymentModal}
        onOpenChange={setOpenOfflinePaymentModal}
        type={ENUM_MODULES.OFFLINE_PAYMENT}
        status='create'
        title='Add Offline Payment'
        description='Enter the invoice reference to proceed with offline payment creation.'
      >
        <OfflinePaymentReferenceForm
          onClose={() => setOpenOfflinePaymentModal(false)}
        />
      </CustomModal>
    </div>
  );
};

export default OfflinePaymentsTab;
