

"use client";

import * as React from "react";
import {
  ChevronsUpDown,
  GalleryVerticalEnd,
  Search,
  UserCog,
} from "lucide-react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { ScrollArea } from "@/components/ui/scroll-area";
import {
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
  useSidebar,
} from "@/components/ui/sidebar";

import Image from "next/image";
import { switchToAdmin, switchToSuperAdmin } from "@/lib/utils";
import { ENUM_ROLE } from "@/lib/types/enums";
import Cookies from "js-cookie";
import { useSetViewAsMutation } from "@/redux/api";

interface School {
  name: string;
  logo: string;
  plan: string;
}

export function SchoolSwitcher({
  schools,
  viewAs,
  actualRole,
}: {
  schools: School[];
  viewAs: ENUM_ROLE;
  actualRole: ENUM_ROLE;
}) {
  const { isMobile } = useSidebar();
  const [activeSchool, setActiveSchool] = React.useState<School>({
    name: "",
    logo: "",
    plan: "",
  });
  const [searchTerm, setSearchTerm] = React.useState("");
  const [open, setOpen] = React.useState(false);

  

  React.useEffect(() => {
    const active = Cookies.get("active_school");
    if (active) {
      try {
        console.log(JSON.parse(active) as School);
        setActiveSchool(JSON.parse(active) as School);
      } catch {
        console.error("Failed to parse active school from cookies");
        setActiveSchool({
          name: "",
          logo: "",
          plan: "",
        });
      }
    } else {
      setActiveSchool({
        name: "",
        logo: "",
        plan: "",
      });
    }
  }, []);

  const switchToSchool = (school: School) => {
    Cookies.set("active_school", JSON.stringify(school));
    window.location.href = "/dashboard";
  };

  // Filter schools based on search term
  const filteredSchools = schools.filter((school) =>
    school.name.toLowerCase().includes(searchTerm.toLowerCase())
  );


  const [setViewAs, { isLoading }] = useSetViewAsMutation();


  const handleToggle = async (value : ENUM_ROLE) => {
    try {
      
      await setViewAs({ view_as: value, schoolId }).unwrap();
    } catch (error) {
      console.error("Failed to toggle view:", error);
    }
  };


  return (
    <SidebarMenu>
      <SidebarMenuItem>
        <Dialog open={open} onOpenChange={setOpen}>
          <DialogTrigger asChild>
            <SidebarMenuButton
              size='lg'
              className='data-[state=open]:bg-sidebar-accent data-[state=open]:text-sidebar-accent-foreground border-white border'
            >
              <div className='flex aspect-square size-8 items-center justify-center rounded-lg bg-sidebar-primary text-sidebar-primary-foreground'>
                {activeSchool.logo ? (
                  <Image
                    src={activeSchool.logo}
                    alt=''
                    className='size-4 object-cover'
                    width={16}
                    height={16}
                  />
                ) : (
                  <GalleryVerticalEnd className='size-4' />
                )}
              </div>
              <div className='grid flex-1 text-left text-sm leading-tight'>
                <span className='truncate font-semibold'>
                  {activeSchool.name ? activeSchool.name : "Switch to School"}
                </span>
                <span className='truncate text-xs'>
                  {activeSchool.plan && activeSchool.plan}
                </span>
              </div>
              <ChevronsUpDown className='ml-auto' />
            </SidebarMenuButton>
          </DialogTrigger>
          <DialogContent
            className={`p-4 ${isMobile ? "w-full" : "max-w-lg"}`}
            // hideCloseBtn={false}
          >
            <DialogHeader className='flex flex-row items-center justify-between'>
              <DialogTitle className='sr-only'>Schools</DialogTitle>
              {actualRole === ENUM_ROLE.SUPERADMIN &&
                viewAs === ENUM_ROLE.ADMIN && (
                  <Button
                    variant='outline'
                    size='sm'
                    onClick={switchToSuperAdmin}
                    className='flex items-center gap-2'
                  >
                    <UserCog className='h-4 w-4' />
                    Switch to SuperAdmin
                  </Button>
                )}
            </DialogHeader>
            <div className='my-2'>
              <div className='relative'>
                <Search className='absolute left-2 top-2.5 h-4 w-4 text-muted-foreground' />
                <Input
                  placeholder='Search schools...'
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className='pl-8'
                />
              </div>
            </div>
            <ScrollArea className='h-[300px] rounded-md border'>
              <div className='p-2 space-y-2'>
                {filteredSchools.length > 0 ? (
                  filteredSchools.map((school) => (
                    <div
                      key={school.name}
                      onClick={() => {
                        setActiveSchool(school);
                        switchToSchool(school);
                        switchToAdmin();
                        setOpen(false);
                      }}
                      className='flex items-center gap-2 p-2 rounded-lg hover:bg-accent cursor-pointer border'
                    >
                      <div className='flex size-6 items-center justify-center rounded-sm border'>
                        {school.logo ? (
                          <Image
                            src={school.logo}
                            alt=''
                            className='size-4 object-cover'
                            width={16}
                            height={16}
                          />
                        ) : (
                          <GalleryVerticalEnd className='size-4' />
                        )}
                      </div>
                      <div className='flex-1'>
                        <div className='font-medium'>{school.name}</div>
                        <div className='text-xs text-muted-foreground'>
                          {school.plan}
                        </div>
                      </div>
                    </div>
                  ))
                ) : (
                  <div className='flex flex-col items-center justify-center p-4 text-center text-sm text-muted-foreground'>
                    <Image
                      width={80}
                      height={80}
                      src='/no-schools-found.svg'
                      alt='No schools found'
                      className='mb-4 h-20 w-20 bg-gray-700'
                    />
                    <p>No schools found</p>
                  </div>
                )}
              </div>
            </ScrollArea>
          </DialogContent>
        </Dialog>
      </SidebarMenuItem>
    </SidebarMenu>
  );
}
